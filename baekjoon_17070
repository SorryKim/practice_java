// 파이프 옮기기 1 / baekjoon_17070
// https://www.acmicpc.net/problem/17070

import java.io.*;
import java.util.*;
import java.lang.Math;

public class Main {
	static int N;
	static int[][] home;
	static int cnt = 0;
	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		home = new int[N+1][N+1];
		
		// 집의 구조 입력 받기
		for(int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j = 1; j <= N; j++) {
				int num = Integer.parseInt(st.nextToken());
				home[i][j] = num;
			}
		}
		
		// 처음에는 1,2로 세로로 파이프가 놓여 있다
		DFS(1,2,0);
		
		System.out.println(cnt);
		
		br.close();
		bw.close();
	}
	
	public static void DFS(int x, int y, int direction) {
		
		// 도착지의 도착한 경우, 경우의수 체크
		if(x == N && y == N) {
			cnt++;
			return;
		}
		
		// 파이프가 가로인 경우
		if(direction == 0) {
			// 다시 가로로 가는 경우
			if(y < N && home[x][y + 1] == 0) {
				DFS(x, y + 1, 0);
			}
			// 대각선으로 가는 경우
			if(x < N && y < N && home[x + 1][y] == 0 && home[x][y + 1] == 0 && home[x + 1][y + 1] == 0) {
				DFS(x + 1, y + 1, 2);
			}
		}
		
		// 파이프가 세로인 경우
		else if(direction == 1) {
			// 다시 세로로 가는 경우
			if(x < N && home[x + 1][y] == 0) {
				DFS(x + 1, y , 1);
			}
			// 대각선으로 가는 경우
			if(x < N && y < N && home[x + 1][y] == 0 && home[x][y + 1] == 0 && home[x + 1][y + 1] == 0) {
				DFS(x + 1, y + 1, 2);
			}
		}
		
		// 파이프가 대각선인 경우
		else if(direction == 2) {
			// 다시 가로로 가는 경우
			if(y < N && home[x][y + 1] == 0) {
				DFS(x, y + 1, 0);
			}
			// 다시 세로로 가는 경우
			if(x < N && home[x + 1][y] == 0) {
				DFS(x + 1, y, 1);
			}
			// 대각선으로 가는 경우
			if(x < N && y < N && home[x + 1][y] == 0 && home[x][y + 1] == 0 && home[x + 1][y + 1] == 0) {
				DFS(x + 1, y + 1, 2);
			}
		}
		
	}
	
}
